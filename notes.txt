Steps to create WebApi

-> dotnet new mvc -n projectname
-> create Models
-> create dbcontext file -> di mendatory
-> do migrations and update database created
-> Interface -> declare method only
-> Repository create -> Inherit interface and use methods / di in repository 
-> controller -> call the Repository method 
-> program.cs -> 
builder.Services.AddCors(x=>{
    x.AddPolicy("corsPolicy",policy=>{
        policy.AllowAnyHeader();
        policy.AllowAnyMethod();
        policy.AllowAnyOrigin();
    });
});

if (app.Environment.IsDevelopment())
{
    app.UseSwagger();
    app.UseSwaggerUI();
}


=======================---------------------------===========================
Services

export class PlayerService{
    private url=""

    constructor(private http:HttpClient){}

    //Get all details Services
    getAll():Observable<any[]>{
        return this.http.get<any[]>(this.url+"/route");
    }

    //Create Player
    Create(data:any)
    {
        let resData:any="";
        let httpHeader:HttpHeaders=new HttpHeaders({
            Accpt:'application/json"
        })
        this.http.post(url,data,{headers:httpHeader}).subscribe(res=>{
            resData=res;
        },
        error=>{
            resData=error
        } )
        return resData
    }

    //Get update
    UpdateById(id:number,updatedData:any):Observable<any>{
        const url=`${this.url}/UpdatePlayer/${id}`;
        return this.http.put<any>(url,updatedData);
    }

    // Delete
    deleteById(id:number):Observable<any>{
        const url=`${this.url}/UpdatePlayer/${id}`;
        return this.http.delete<any>(url);
    }

}



// delete component
<h2>Delete</h2>
<label for="deleteItemId">Enter 